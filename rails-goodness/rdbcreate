#!/usr/bin/env ruby
#
#  Created on 2007-11-9.
#  Copyright (c) 2007. All rights reserved.

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'optparse'

OPTIONS = {
  :user     => nil,
  :password => nil,
  :database => nil
}
MANDATORY_OPTIONS = %w(  )

OPTIONS[:user] = `whoami`.chomp
OPTIONS[:database] = ARGV[0]

parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
One operation, Three databases.
  <projectname>_development
  <projectname>_production
  <projectname>_test
  
Usage: #{File.basename($0)} [options] <projectname>

Options are:
BANNER
  opts.separator ""
  opts.on("-u", "--user=name", String, "User for login if not the current user."){|v| 
    OPTIONS[:user] = v.gsub('=', '')}
  opts.on("-p", "--password[=name]", String, "Password to use when connecting to server. If password is not given it's asked from the tty."){|v| 
    OPTIONS[:password] = v.gsub('=', '')}

  opts.on("-h", "--help", "Show this help message.") { puts opts; exit }
  opts.parse!(ARGV)

  if MANDATORY_OPTIONS && MANDATORY_OPTIONS.find { |option| OPTIONS[option.to_sym].nil? }
    puts opts; exit
  end
end

def prompt_password
  puts "MySQL Password: "
  system "stty -echo"
  OPTIONS[:password] = $stdin.gets.chomp
  system "stty echo"
end

if ARGV[0].nil?
  puts "#{File.basename($0)}: not enough arguments provided; try '#{File.basename($0)} -h' for more info"
  exit
end

prompt_password unless OPTIONS[:password]

def fmt_cmd(action)
  cmd = "mysqladmin"  
  cmd+= " -u #{OPTIONS[:user]}" if OPTIONS[:user]
  cmd+= " -p'#{OPTIONS[:password]}'" if OPTIONS[:password]
  cmd+= " create #{OPTIONS[:database]}_#{action}"
end

# CREATE LOCAL DATABASES
%w[ development production test ].each do |action|
  system "progress_header \"Create Database: #{OPTIONS[:database]}_#{action}\""
  system fmt_cmd(action)
end
