#!/usr/bin/env ruby
#
#  Created on 2007-11-9.
#  Copyright (c) 2007. All rights reserved.

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'optparse'

OPTIONS = {
  :path       => '~',
  :name       => nil,
  :url        => nil
}
MANDATORY_OPTIONS = %w( name )

parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
Cleanly migrate an SVN repository to a GIT repository
this migration is destructive - will no longer be able to update to SVN repo

Usage: #{File.basename($0)} -n RepoName [options]

Options are:
BANNER
  opts.separator ""
  opts.on("-n", "--name=repo", "The repository name. Assumes svn server defined in env_git"){|v| 
    OPTIONS[:name] = v.gsub('=', '')}
  opts.on("-u", "--url=repo", "The repository url."){|v| 
    OPTIONS[:url] = v.gsub('=', '')}
  opts.on("-h", "--help", "Show this help message.") { puts opts; exit }
  opts.parse!(ARGV)

  if MANDATORY_OPTIONS && MANDATORY_OPTIONS.find { |option| OPTIONS[option.to_sym].nil? }
    puts opts; exit
  end
end

@svn_server = File.read(ENV['GIT_SVN_SERVER']) if File.exist?
@svn_url = OPTIONS[:url] ? OPTIONS[:url] : "#{ENV['GIT_SVN_SERVER']}#{OPTIONS[:name]}"

# make temp directory
system("mkdir #{OPTIONS[:name]}_tmp")
# init git repo in temp directory
Dir.chdir("#{OPTIONS[:name]}_tmp"){ 
  system("git-svn init #{@svn_url} --no-metadata")
  system("git config svn.authorsfile #{ENV['GIT_SVN_USER_MAP']}") # set authorsfile - this maps svn users to git users
  system("git-svn fetch") # fetch
}
# clone to fresh
system("git clone #{OPTIONS[:name]}_tmp #{OPTIONS[:name]}")
# remove temp
system("rm -drf #{OPTIONS[:name]}_tmp")
